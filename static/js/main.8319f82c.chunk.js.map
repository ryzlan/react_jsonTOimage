{"version":3,"sources":["component/OptionsList.jsx","component/CardList.jsx","component/ShowData.jsx","component/Loading.jsx","component/Main.jsx","component/InputFile.jsx","App.js","serviceWorker.js","index.js"],"names":["OptionsList","state","CreateOptionsList","option","id","answer","key","className","renderOptionsList","this","props","answers","map","Component","CardList","data","question","ShowData","CreateList","renderdata","datas","type","onClick","renderConverter","Loading","Main","loading","flag","error","setState","arr","forEach","element","push","nodes","e","document","getElementById","domtoimage","toPng","then","dataUrl","download","renderError","class","role","InputFile","onChange","handleChange","placeholder","App","useState","d","setdata","console","log","files","target","reader","FileReader","readAsText","onload","JSON","parse","result","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.8319f82c.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass OptionsList extends Component {\n    state = {  }\n\n    CreateOptionsList=(option)=>{\n        const {id , answer } = option ;\n        return (\n            <li key={id} className=\"\">\n                <p className=\"option\">\n                   <span>{answer}</span> \n                </p>\n                \n            </li>\n        )\n    }\n    render() { \n\n        const renderOptionsList = this.props.answers.map(this.CreateOptionsList)\n        return (\n         <ul className=\"options\">\n            {renderOptionsList}\n        </ul>\n      );\n    }\n}\n \nexport default OptionsList;","import React, { Component } from 'react';\n\nimport OptionsList from './OptionsList';\n\nclass CardList extends Component {\n    state = {  }\n    render() { \n         const {id ,question } = this.props.data.question ;\n         \n        return (\n            <div className=\"card-wrapper\" id={id}>\n              <div className=\"cards\" >\n                <div className=\"card-body question\">\n                    <p className=\"card-text questions\">\n                    {question}\n                    </p>\n                </div>\n                <OptionsList  answers={this.props.data.answers}/>\n              </div>\n              <div className=\"footer\">\n                  <p> www.porashona.online</p>\n              </div>\n              \n          </div>\n        );\n    }\n}\n \nexport default CardList;","import React, { Component } from 'react';\nimport CardList from './CardList';\n\n\nclass ShowData extends Component {\n\n    CreateList=(data)=>{\n        return (\n         <CardList key={data.question.id} data={data} />\n        )\n    }\n\n    render() { \n        const renderdata = this.props.datas.map(this.CreateList);\n        \n        return (\n        <div className=\"Aligner\">\n\n        {renderdata} \n       \n        <div className=\"button_wrapper\">\n          <button type=\"button\" className=\"block tx_white\" \n          onClick={this.props.renderConverter} >\n          Download</button>\n        </div>\n        </div>  \n        );\n    }\n}\n \nexport default ShowData;","import React, { Component } from 'react';\n\nclass Loading extends Component {\n    state = {  }\n    render() { \n        return ( \n            <div className=\"loadsBg\">\n                <h1 className=\"loads\">Loading ....</h1>\n            <div className=\"loader\">\n                <span></span>\n                <span></span>\n                <span></span>\n                <span></span>\n            </div>\n\n            </div>\n         );\n    }\n}\n \nexport default Loading;","import React, { Component } from 'react';\nimport ShowData  from './ShowData';\nimport Loading from './Loading';\n\n\nimport domtoimage from 'dom-to-image';\nimport download from 'downloadjs';\n\n\n\n\nclass Main extends Component {\n    state = { \n\n        loading:false,\n        flag:false,\n        error:'', \n        data:[]\n     }\n\n     \n    \n    // canvasConverter=(node)=>{\n    //     return new Promise((resolve , reject) =>{\n    //         domtoimage.toPng(node)\n    //             .then(function(dataUrl){\n    //                 return resolve(dataUrl) ;\n    //             })\n    //             .catch(function(error){\n    //                 return reject(error);\n    //             })\n    //     })\n    // }\n    \n    \n      renderConverter=()=>{\n        this.setState({\n          loading:true\n        })\n        let arr = [];\n        this.props.data.forEach(element => {\n          arr.push(element.question.id);\n        });\n    \n        \n        let nodes =[];\n        arr.forEach(e =>{\n          nodes.push(document.getElementById(e));\n          domtoimage.toPng(document.getElementById(e))\n            .then((dataUrl)=>{\n              download(dataUrl , \"image.png\");\n            })\n        })\n        \n        this.setState({\n          loading:false\n        })\n\n        // let promises = [];\n        // nodes.forEach( n =>{\n        //     promises.push(this.canvasConverter(n));\n        // })\n        \n     \n    \n        // Promise.all(promises)\n        // .then((data)=>{\n            \n        //     for (let i = 0; i < data.length; i++) {\n        //        var filename = \"image\"+i+\".png\" ; \n        //         download(data[i] , filename);\n        //     }\n    \n            \n            \n        // })\n        // .catch((err)=>{\n        //     console.error(err);\n        //     this.setState({\n        //       flag:true,\n        //       error:\"Something went terribly Wrong !! \"\n        //     })\n    \n        // });\n        \n            \n      }\n\n\n\n\n\n    render() { \n        let renderError= (<div class=\"alert alert-danger\" role=\"alert\">\n        {this.state.error}\n        </div> );\n        return (\n            <div>\n                {this.state.flag ? {renderError}  : ''}\n                {this.state.loading ?\n                <Loading /> :\n\n                <div className=\"render\">\n                    <ShowData \n                    datas={this.props.data}  \n                    renderConverter={this.renderConverter} \n                    />\n                </div>\n                }\n            </div>\n          );\n    }\n}\n \nexport default Main;","import React, { Component } from 'react';\n\nclass InputFile extends Component {\n    state = {  }\n    \n\n\n    render() { \n        return ( \n            <div className=\"render \">\n             <h1 className=\"white\">React HTML2Image Converter</h1>\n                <input type=\"file\" onChange={(e)=>this.props.handleChange(e)} className=\"inputfile\" placeholder=\"Insert a json file\"/>\n            </div>\n         );\n    }\n}\n \nexport default InputFile;","import React , { useState  }from 'react';\n\nimport './index.css'\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\n\nimport Main from './component/Main';\n\nimport InputFile from './component/InputFile';\n\n// import jsondata from './data/data.json';\n\nfunction App() {\n  const [d , setdata ] = useState({data:[]});\n  console.log(d)\n  \n\n  const handleChange=(e)=>{\n    let files = e.target.files;\n    console.log(files);\n    let reader = new FileReader();\n    reader.readAsText(files[0]);\n    reader.onload=(e)=>{\n      //console.warn(\"data\", e.target.result );\n       let data = JSON.parse( e.target.result);\n       console.log(data);\n\n      setdata({data:data})\n      console.log(d)\n       \n    }\n}\n  \n  \n  return (\n    <div className=\"container bd\">\n      \n      <InputFile  handleChange={handleChange}/>\n      {\n        d.data.length >  0 ? \n        <Main data={d.data} />\n        :\n        <p>Error in the json File or Json File Empty</p>\n      }\n     \n      \n        \n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}